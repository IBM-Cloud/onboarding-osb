{"version":3,"sources":["util/app.utils.js","constants/app.constants.js","components/Objects/Objects.js","components/DisplayModal/DisplayModal.js","components/MetricPanel/MetricPanel.js","components/Instances/Instances.js","components/Default/Default.js","App.js","reportWebVitals.js","index.js"],"names":["getInstanceRows","instances","rowData","map","instance","instanceId","name","planId","status","region","updateDate","push","id","Date","toLocaleDateString","day","month","year","hour","minute","second","apiRequest","url","requestOptions","a","response","fetch","then","json","console","log","AppConst","buildNumber","env","BUILD_NUMBER","brokerCreds","brokerUsername","BROKER_USERNAME","brokerPassword","BROKER_PASSWORD","tableTitles","Objects","Instances","instanceDetailsPathParams","type","tables","apiUrls","getCatalog","getInstances","getMetadata","sendMetering","gcId","tableHeaders","header","key","Metric","TestMetric","props","catalog","useState","setRowData","headerData","setHeaderData","useEffect","_","isEmpty","services","service","objectId","metadata","kind","updated","plans","plan","getRowDataFromCatalog","className","DataTable","isSortable","rows","headers","getHeaderProps","getRowProps","getTableProps","onInputChange","TableContainer","title","TableToolbar","TableToolbarSearch","placeholder","onChange","TableToolbarContent","TableToolbarMenu","disabled","children","renderIcon","Download16","iconDescription","onClick","e","Renew16","Table","TableHead","TableRow","index","TableHeader","TableBody","row","cells","cell","TableCell","value","displayName","DisplayModal","onCloseModal","openModal","document","getElementsByClassName","click","ModalWrapper","buttonTriggerText","buttonTriggerClassName","modalHeading","passiveModal","preventCloseOnClickOutside","CodeSnippet","JSON","stringify","Button","MetricPanel","closePanel","metrics","isMeteringKeySet","metricQuantity","setMetricQuantity","updateFlag","setUpdateFlag","meteringResponse","setMeteringResponse","showModal","setShowModal","isLoading","setIsLoading","costs","met","metric","parseFloat","onNumberChange","quantity","imaginaryTarget","getMesuredUsage","measuredUsage","Object","keys","resourceId","requestBody","Headers","append","method","redirect","mode","body","HeaderPanel","expanded","Close16","NumberInput","min","style","backgroundColor","paddingLeft","textAlign","metricId","find","m","price","prices","InlineLoading","calculateTotal","cost","quantity_tier","getCostForQuantity","getTotalCost","Add16","Tag","togglePanel","setTogglePanel","allMetrics","setAllMetrics","selectedInstance","setSelectedInstance","selectedPlan","setSelectedPlan","selectedMetrics","setSelectedMetrics","getInstanceData","instanceData","instanceRows","getMetric","onTestClick","target","r","getMetricsForPlan","p","metricsData","amounts","amount","amt","country","metric_id","charge_unit_name","tier_model","selectedMetric","TableExpandHeader","TableExpandRow","isExpanded","TableExpandedRow","colSpan","length","Default","selectTable","setSelectTable","setCatalog","instructionsUrl","setInstructionUrl","documentationUrl","setDocumentationUrl","brokerMetadata","setBrokerMetadata","setIsMeteringKeySet","IS_METERING_APIKEY_SET","SkeletonText","width","Link","href","PC_URL","description","BROKER_URL","ArrowsHorizontal16","App","exact","path","component","from","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c8fc3396.chunk.js","sourcesContent":["import mockInstances from '../constants/mock_instance.json';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport const getRowDataFromCatalog = (services) => {\r\n\tlet rowData = [];\r\n\tservices.map((service => {\r\n\t\tconst { id, id: objectId, name, metadata } = service;\r\n\t\trowData.push({\r\n\t\t\tid,\r\n\t\t\tobjectId,\r\n\t\t\tname,\r\n\t\t\tkind: \"Service\",\r\n\t\t\tupdated: new Date(metadata.updated).toLocaleDateString(\"en-US\", { day: \"numeric\", month: \"short\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\" }, \"-\")\r\n\t\t});\r\n\t\tservice.plans.map((plan) => {\r\n\t\t\tconst { id, id: objectId, name, metadata } = plan;\r\n\t\t\trowData.push({\r\n\t\t\t\tid,\r\n\t\t\t\tobjectId,\r\n\t\t\t\tname,\r\n\t\t\t\tkind: \"Pricing Plan\",\r\n\t\t\t\tupdated: new Date(metadata.updated).toLocaleDateString(\"en-US\", { day: \"numeric\", month: \"short\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\" }, \"-\")\r\n\t\t\t});\r\n\t\t\treturn true\r\n\t\t});\r\n\t\treturn true;\r\n\t}))\r\n\treturn rowData;\r\n};\r\n\r\nexport const getInstanceRows = (instances) => {\r\n\tlet rowData = [];\r\n\tinstances.map((instance) => {\r\n\t\tconst { instanceId, name, planId, status, region, updateDate } = instance;\r\n\t\trowData.push({\r\n\t\t\tid: instanceId,\r\n\t\t\tinstanceId,\r\n\t\t\tname,\r\n\t\t\tplanId,\r\n\t\t\tstatus,\r\n\t\t\tregion,\r\n\t\t\tupdateDate: new Date(updateDate).toLocaleDateString(\"en-US\", { day: \"numeric\", month: \"short\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\" }, \"-\")\r\n\t\t})\r\n\t\treturn true;\r\n\t})\r\n\treturn rowData;\r\n};\r\n\r\nexport const apiRequest = async (url, requestOptions) => {\r\n\tlet response = []\r\n\ttry {\r\n\t\tresponse = await fetch(url, requestOptions)\r\n\t\t\t.then(response => response)\r\n\t\t\t.then(response => response.json())\r\n\t}\r\n\tcatch (error) {\r\n\t\tconsole.log(\"No data found.\",)\r\n\t}\r\n\treturn response;\r\n};\r\n\r\nexport const useQuery = () => {\r\n\treturn new URLSearchParams(decodeURIComponent(useLocation().search));\r\n};\r\n\r\nexport const getInstances = async () => {\r\n\treturn mockInstances;\r\n};\r\n","import env from \"react-dotenv\";\r\nexport const AppConst = {\r\n\tbuildNumber: env.BUILD_NUMBER || \"test_version_0.1\",\r\n\r\n\tbrokerCreds: {\r\n\t\tbrokerUsername: env.BROKER_USERNAME || \"admin\",\r\n\t\tbrokerPassword: env.BROKER_PASSWORD || \"admin\"\r\n\t},\r\n\r\n\ttableTitles: {\r\n\t\tObjects: \"Objects and metadata\",\r\n\t\tInstances: \"Instances\"\r\n\t},\r\n\r\n\tinstanceDetailsPathParams: {\r\n\t\ttype: \"type\",\r\n\t\tid: \"instance_id\"\r\n\t},\r\n\r\n\ttables: [\"Objects\", \"Instances\"],\r\n\r\n\tapiUrls: {\r\n\t\tgetCatalog: \"/v2/catalog\",\r\n\t\tgetInstances: \"/support/instances\",\r\n\t\tgetMetadata: \"/support/metadata\",\r\n\t\tsendMetering: (gcId) => \"/metering/\"+gcId+\"/usage\"\r\n\t},\r\n\r\n\ttableHeaders: {\r\n\t\tObjects: [\r\n\t\t\t{\r\n\t\t\t\theader: 'Name',\r\n\t\t\t\tkey: 'name',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Kind',\r\n\t\t\t\tkey: 'kind',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'ID',\r\n\t\t\t\tkey: 'objectId',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Updated',\r\n\t\t\t\tkey: 'updated',\r\n\t\t\t}\r\n\t\t],\r\n\t\tInstances: [\r\n\t\t\t{\r\n\t\t\t\theader: 'Name',\r\n\t\t\t\tkey: 'name',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'ID',\r\n\t\t\t\tkey: 'instanceId',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Status',\r\n\t\t\t\tkey: 'status',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Updated',\r\n\t\t\t\tkey: 'updateDate',\r\n\t\t\t}\r\n\t\t],\r\n\t\tMetric: [\r\n\t\t\t{\r\n\t\t\t\theader: 'Metric',\r\n\t\t\t\tkey: 'metric',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Type',\r\n\t\t\t\tkey: 'type',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'ID',\r\n\t\t\t\tkey: 'metricId',\r\n\t\t\t}\r\n\t\t],\r\n\t\tTestMetric: [\r\n\t\t\t{\r\n\t\t\t\theader: 'Metric Quantity',\r\n\t\t\t\tkey: 'metric',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Cost per unit',\r\n\t\t\t\tkey: 'cost',\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}\r\n","import {\r\n\tDataTable, Table, TableBody, TableCell, TableContainer, TableHead, TableHeader, TableRow, TableToolbar, TableToolbarSearch, TableToolbarContent, TableToolbarMenu\r\n} from \"carbon-components-react\";\r\nimport { Download16, Renew16 } from '@carbon/icons-react';\r\nimport './Objects.scss';\r\nimport { useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { getRowDataFromCatalog } from \"../../util/app.utils\";\r\nimport { AppConst } from \"../../constants/app.constants\";\r\n\r\nfunction Objects(props) {\r\n\tconst { catalog } = props;\r\n\tconst [rowData, setRowData] = useState([]);\r\n\tconst [headerData, setHeaderData] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!_.isEmpty(catalog)) {\r\n\t\t\tsetHeaderData(AppConst.tableHeaders.Objects);\r\n\t\t\tsetRowData(getRowDataFromCatalog(catalog.services));\r\n\t\t}\r\n\t}, [catalog])\r\n\r\n\treturn (\r\n\t\t<div className=\"bx--grid object-info\">\r\n\t\t\t<div className=\"bx--row\">\r\n\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t<DataTable isSortable={true} rows={rowData} headers={headerData}>\r\n\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getRowProps, getTableProps, onInputChange }) => (\r\n\t\t\t\t\t\t\t<TableContainer key=\"tableContainer\" title={AppConst.tableTitles[\"Objects\"]}>\r\n\t\t\t\t\t\t\t\t<TableToolbar>\r\n\t\t\t\t\t\t\t\t\t<TableToolbarSearch placeholder=\"Search...\" onChange={onInputChange} />\r\n\t\t\t\t\t\t\t\t\t<TableToolbarContent>\r\n\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"download\" renderIcon={Download16} iconDescription={\"download\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"refresh\" renderIcon={Renew16} iconDescription={\"reload\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t</TableToolbarContent>\r\n\t\t\t\t\t\t\t\t</TableToolbar>\r\n\t\t\t\t\t\t\t\t<Table {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t{headers.map((header, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader key={index} {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t{rows.map((row, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={row.id} {...getRowProps({ row })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={cell.id}>{cell.value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</DataTable>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nObjects.displayName = 'Objects';\r\n\r\nexport default Objects;\r\n","import {\r\n\tButton, CodeSnippet, ModalWrapper\r\n} from \"carbon-components-react\";\r\n\r\nimport './DisplayModal.scss';\r\nimport { useEffect } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nfunction DisplayModal(props) {\r\n\tconst { response, onCloseModal } = props;\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!_.isEmpty(response)) {\r\n\t\t\topenModal()\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst openModal = () => {\r\n\t\tdocument.getElementsByClassName(\"modal-trigger\")[0].click()\r\n\t}\r\n\r\n\tconst closeModal = () => {\r\n\t\tdocument.getElementsByClassName(\"bx--modal-close\")[0].click()\r\n\t\tonCloseModal();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ModalWrapper\r\n\t\t\t\tbuttonTriggerText=\"Modal\"\r\n\t\t\t\tbuttonTriggerClassName=\"modal-trigger\"\r\n\t\t\t\tmodalHeading=\"Metering Response\"\r\n\t\t\t\tpassiveModal={true}\r\n\t\t\t\tpreventCloseOnClickOutside={true}\r\n\t\t\t>\r\n\t\t\t\t<div className=\"res-modal\">\r\n\t\t\t\t\t{\"Metering API returned status: \" + response[0].status}\r\n\t\t\t\t\t<h6>Response</h6>\r\n\t\t\t\t\t<CodeSnippet type=\"multi\">{JSON.stringify(response, null, 4)}</CodeSnippet>\r\n\t\t\t\t\t<Button kind=\"secondary\" className=\"login-btn\" onClick={closeModal}>Close</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</ModalWrapper>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nDisplayModal.displayName = 'DisplayModal';\r\n\r\nexport default DisplayModal;\r\n","import {\r\n\tHeaderPanel, Button, CodeSnippet, NumberInput, DataTable, TableContainer, Table, TableHead, TableRow, TableHeader, TableBody, TableCell, ModalWrapper, Tag, Loading, InlineLoading\r\n} from \"carbon-components-react\";\r\nimport { Close16, Add16 } from '@carbon/icons-react';\r\nimport './MetricPanel.scss';\r\nimport { useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { AppConst } from \"../../constants/app.constants\";\r\nimport { apiRequest } from \"../../util/app.utils\";\r\nimport { encode } from \"base-64\";\r\nimport DisplayModal from \"../DisplayModal/DisplayModal\";\r\n\r\nfunction MetricPanel(props) {\r\n\tconst { closePanel, instance, metrics, plan, gcId, isMeteringKeySet } = props;\r\n\r\n\tconst [metricQuantity, setMetricQuantity] = useState({});\r\n\tconst [updateFlag, setUpdateFlag] = useState(false);\r\n\tconst [meteringResponse, setMeteringResponse] = useState(false);\r\n\tconst [showModal, setShowModal] = useState(false);\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (_.isEmpty(metricQuantity)) {\r\n\t\t\tlet costs = {};\r\n\t\t\tmetrics.map((met => {\r\n\t\t\t\tcosts[met.metric] = parseFloat(0.00)\r\n\t\t\t\treturn true\r\n\t\t\t}));\r\n\t\t\tsetMetricQuantity(costs);\r\n\t\t\tsetUpdateFlag(!updateFlag);\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst onNumberChange = (e) => {\r\n\t\tlet quantity = metricQuantity;\r\n\t\tlet metricId = e.imaginaryTarget.id;\r\n\t\tquantity[metricId] = e.imaginaryTarget.value;\r\n\t\tsetMetricQuantity(quantity);\r\n\t\tsetUpdateFlag(!updateFlag);\r\n\t}\r\n\r\n\tconst getCostForQuantity = (metricId, quantity) => {\r\n\t\tlet quantityTier = metrics.find(m => m.metric === metricId).price.prices[0].quantity_tier;\r\n\t\tlet price = metrics.find(m => m.metric === metricId).price.prices[0].price;\r\n\t\tlet cost = quantity * price;\r\n\t\treturn cost;\r\n\t}\r\n\r\n\tconst closeModal = () => {\r\n\t\tsetShowModal(false);\r\n\t}\r\n\r\n\tconst getMesuredUsage = () => {\r\n\t\tlet measuredUsage = [];\r\n\t\tObject.keys(metricQuantity).map((metric) => {\r\n\t\t\tmeasuredUsage.push({\r\n\t\t\t\t\"measure\": metric,\r\n\t\t\t\t\"quantity\": metricQuantity[metric]\r\n\t\t\t})\r\n\t\t\treturn true;\r\n\t\t})\r\n\t\treturn measuredUsage;\r\n\t}\r\n\r\n\tconst sendMetering = async () => {\r\n\t\tsetIsLoading(true)\r\n\t\tlet resourceId = instance.id;\r\n\t\tlet region = instance.region;\r\n\t\tlet planId = plan.id;\r\n\t\tlet measuredUsage = getMesuredUsage();\r\n\t\tconst requestBody = {\r\n\t\t\t\"region\": region,\r\n\t\t\t\"resource_instance_id\": resourceId,\r\n\t\t\t\"plan_id\": planId,\r\n\t\t\t\"measured_usage\": measuredUsage\r\n\t\t}\r\n\r\n\t\tvar headers = new Headers();\r\n\t\theaders.append(\"Content-Type\", \"application/json\");\r\n\t\theaders.append(\"Accept\", \"application/json\");\r\n\t\t\r\n\t\tvar requestOptions = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: headers,\r\n\t\t\tredirect: 'follow',\r\n\t\t\tmode: 'cors',\r\n\t\t\tbody: JSON.stringify(requestBody)\r\n\t\t};\r\n\t\tlet response = await apiRequest(AppConst.apiUrls.sendMetering(gcId), requestOptions);\r\n\t\tsetMeteringResponse(response);\r\n\t\tsetIsLoading(false)\r\n\t\tsetShowModal(true);\r\n\t}\r\n\r\n\tconst getTotalCost = () => {\r\n\t\tlet calculateTotal = 0;\r\n\t\tObject.keys(metricQuantity).map(metricId => {\r\n\t\t\tlet cost = getCostForQuantity(metricId, metricQuantity[metricId]);\r\n\t\t\tcalculateTotal += parseFloat(cost);\r\n\t\t})\r\n\t\treturn calculateTotal;\r\n\t}\r\n\r\n\tconst getCostPerUnit = (metricId) => metrics.find(m => m.metric === metricId).price.prices[0].price;\r\n\r\n\treturn (\r\n\t\t<HeaderPanel aria-label=\"metric side panel\" aria-labelledby=\"side panel\" expanded>\r\n\t\t\t<div className=\"bx--grid\">\r\n\t\t\t\t<div className=\"bx--row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-14\">\r\n\t\t\t\t\t\t<h3>Estimation and pricing</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"bx--col-lg-2\">\r\n\t\t\t\t\t\t<Button kind=\"ghost\" onClick={closePanel} className=\"panel-close-btn\" renderIcon={Close16} iconDescription={\"close panel\"} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<div className=\"bx--label\">Pricing plan name</div>\r\n\t\t\t\t\t\t<CodeSnippet className=\"panel-ele-70\">{plan.name}</CodeSnippet>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<div className=\"bx--label\">Pricing plan programmatic name</div>\r\n\t\t\t\t\t\t<CodeSnippet className=\"panel-ele-70\">{plan.name}</CodeSnippet>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<div className=\"bx--label\">Location</div>\r\n\t\t\t\t\t\t<CodeSnippet className=\"panel-ele-70\">{instance.region}</CodeSnippet>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<h5>Estimation</h5>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{\r\n\t\t\t\t\tmetrics.map((metric, index) => (\r\n\t\t\t\t\t\t<div key={index} className=\"bx--row sub-row\">\r\n\t\t\t\t\t\t\t<div className=\"bx--col-lg-8\">\r\n\t\t\t\t\t\t\t\t<div className=\"bx--label\">{metric.metric}</div>\r\n\t\t\t\t\t\t\t\t<NumberInput onChange={onNumberChange} id={metric.metric} min={0}></NumberInput>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<h5>Testing</h5>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row testing-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\tOnce you've entered values for any metrics you'd\r\n\t\t\t\t\t\tike to test, you can fire corresponding usage events\r\n\t\t\t\t\t\tusing our wonderful button.\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"bx--col-lg-16 sub-row\">\r\n\t\t\t\t\t\t<DataTable rows={metrics} headers={AppConst.tableHeaders.TestMetric}>\r\n\t\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getTableProps }) => (\r\n\t\t\t\t\t\t\t\t<TableContainer title=\"\">\r\n\t\t\t\t\t\t\t\t\t<Table className=\"metric-table\" {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{headers.map((header, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader key={index} {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t\t<TableBody className=\"metric-table-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t{rows.map((row, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: \"#f4f4f4\", paddingLeft: \"1rem\" }} key={row.cells[0].id}><strong>{metricQuantity[row.cells[0].value]}</strong> {row.cells[0].value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: \"#f4f4f4\", paddingLeft: \"1rem\", textAlign: \"right\" }} key={row.cells[1].id}>{getCostPerUnit(row.cells[0].value)} USD</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</DataTable>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row testing-row testing-row-bottom\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16 sub-row\">\r\n\t\t\t\t\t\t{isLoading\r\n\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t<InlineLoading className=\"\"/>\r\n\t\t\t\t\t\t\t: <>\r\n\t\t\t\t\t\t\t\t<Button disabled={isMeteringKeySet ? getTotalCost() <= 0 : true} renderIcon={Add16} iconDescription={\"send test metric\"} onClick={sendMetering}>Send metering data</Button>\r\n\t\t\t\t\t\t\t\t<div>{!isMeteringKeySet && <Tag type=\"red\">Can't send metering data. METERING_API_KEY is not set in broker.</Tag>}</div>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{showModal && <DisplayModal response={meteringResponse} onCloseModal={closeModal}></DisplayModal>}\r\n\t\t</HeaderPanel>\r\n\t);\r\n}\r\n\r\nMetricPanel.displayName = 'MetricPanel';\r\n\r\nexport default MetricPanel;\r\n","import {\r\n\tDataTable, Table, TableBody, TableCell, TableContainer, TableHead, TableHeader, TableRow, TableExpandRow, TableExpandedRow, TableExpandHeader, TableToolbar, TableToolbarSearch, TableToolbarContent, TableToolbarMenu, Button, ModalWrapper\r\n} from \"carbon-components-react\";\r\nimport { Download16, Renew16 } from '@carbon/icons-react';\r\nimport './Instances.scss';\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { AppConst } from \"../../constants/app.constants\";\r\nimport MetricPanel from \"../MetricPanel/MetricPanel\";\r\nimport { apiRequest, getInstanceRows } from \"../../util/app.utils\";\r\nimport _, { isEmpty } from \"lodash\";\r\nimport { encode } from \"base-64\";\r\n\r\nfunction Instances(props) {\r\n\tconst { catalog, isMeteringKeySet } = props;\r\n\tconst [rowData, setRowData] = useState([]);\r\n\tconst [headerData, setHeaderData] = useState([]);\r\n\tconst [togglePanel, setTogglePanel] = useState(false);\r\n\tconst [allMetrics, setAllMetrics] = useState([]);\r\n\tconst [selectedInstance, setSelectedInstance] = useState(\"\");\r\n\tconst [selectedPlan, setSelectedPlan] = useState(\"\");\r\n\tconst [selectedMetrics, setSelectedMetrics] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetHeaderData(AppConst.tableHeaders.Instances);\r\n\t\tif (!_.isEmpty(catalog) && _.isEmpty(rowData)) {\r\n\t\t\tgetInstanceData();\r\n\t\t}\r\n\t}, [catalog])\r\n\r\n\tconst getInstanceData = async () => {\r\n\t\tvar headers = new Headers();\r\n\t\theaders.append(\"Content-Type\", \"application/json\");\r\n\t\theaders.append(\"Accept\", \"application/json\");\r\n\t\t\r\n\t\tvar requestOptions = {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: headers,\r\n\t\t\tredirect: 'follow',\r\n\t\t\tmode: 'cors'\r\n\t\t};\r\n\t\tlet instanceData = await apiRequest(AppConst.apiUrls.getInstances, requestOptions);\r\n\t\tlet instanceRows = getInstanceRows(instanceData);\r\n\t\tsetRowData(instanceRows);\r\n\t\tgetMetric();\r\n\t}\r\n\r\n\tconst onTestClick = (e) => {\r\n\t\tsetSelectedInstance(rowData[e.target.id]);\r\n\t\tlet planId = rowData.find(r => r.instanceId === e.target.name).planId;\r\n\t\tsetSelectedMetrics(getMetricsForPlan(planId));\r\n\t\tsetSelectedPlan(catalog.services[0].plans.find(p => p.id === planId));\r\n\t\tsetTogglePanel(!togglePanel);\r\n\t}\r\n\r\n\tconst onCloseClick = () => {\r\n\t\tsetTogglePanel(!togglePanel);\r\n\t}\r\n\r\n\tconst getMetric = async () => {\r\n\t\tlet metricsData = [];\r\n\t\tcatalog.services[0].plans.map((plan) => {\r\n\t\t\tif (plan.metadata.costs.metrics) {\r\n\t\t\t\tmetricsData.push({\r\n\t\t\t\t\tplanId: plan.id,\r\n\t\t\t\t\tmetrics: plan.metadata.costs.metrics.map((metric) => {\r\n\t\t\t\t\t\tif (metric && metric.amounts) {\r\n\t\t\t\t\t\t\tlet amount = metric.amounts.find((amt) => amt.country === \"USA\");\r\n\t\t\t\t\t\t\treturn ({\r\n\t\t\t\t\t\t\t\tid: metric.metric_id,\r\n\t\t\t\t\t\t\t\tmetric: metric.charge_unit_name,\r\n\t\t\t\t\t\t\t\tmetricId: metric.metric_id,\r\n\t\t\t\t\t\t\t\ttype: metric.tier_model,\r\n\t\t\t\t\t\t\t\tprice: amount\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t})\r\n\t\tsetAllMetrics(metricsData);\r\n\t}\r\n\r\n\tconst getMetricsForPlan = (planId) => {\r\n\t\tlet selectedMetric = allMetrics.find((met) => met.planId === planId)\r\n\t\tif (selectedMetric && selectedMetric.metrics) {\r\n\t\t\treturn selectedMetric.metrics;\r\n\t\t}\r\n\t\telse return [];\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\r\n\t\t\t<div className=\"bx--grid instances-info\">\r\n\t\t\t\t<div className=\"bx--row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<DataTable rows={rowData} headers={headerData}>\r\n\t\t\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getRowProps, getTableProps, onInputChange }) => (\r\n\t\t\t\t\t\t\t\t\t<TableContainer key=\"tableContainer\" title={AppConst.tableTitles[\"Instances\"]}>\r\n\t\t\t\t\t\t\t\t\t\t<TableToolbar>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableToolbarSearch placeholder=\"Search...\" onChange={onInputChange} />\r\n\t\t\t\t\t\t\t\t\t\t\t<TableToolbarContent>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"download\" renderIcon={Download16} iconDescription={\"Download\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"refresh\" renderIcon={Renew16} iconDescription={\"Reload\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t\t\t</TableToolbarContent>\r\n\t\t\t\t\t\t\t\t\t\t</TableToolbar>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tisEmpty(rowData)\r\n\t\t\t\t\t\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"empty-message\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>No Instances Found.</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Provision instances to see this list.</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Table {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableExpandHeader />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{headers.map((header, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader key={index} {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{rows.map((row, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableExpandRow key={row.id} {...getRowProps({ row })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={cell.id}>{cell.value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableExpandRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.isExpanded && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableExpandedRow colSpan={headers.length + 1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{!isEmpty(getMetricsForPlan(rowData[index].planId))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"metric-desc\">Here are the metrics for this pricing plan.You can even fire events from them to see if things\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tare hooked up right.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"align-right\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button id={index} name={rowData[index].instanceId} onClick={onTestClick} className=\"test-metric-btn\">Test metric reporting</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<DataTable rows={getMetricsForPlan(rowData[index].planId)} headers={AppConst.tableHeaders.Metric}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getTableProps }) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableContainer title=\"\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Table className=\"metric-table\" {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{headers.map((header) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableBody className=\"metric-table-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{rows.map((row) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ paddingLeft: \"1rem\" }} key={cell.id}>{cell.value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</DataTable>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"empty-message\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>No Metrics Found.</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Check plan details.</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableExpandedRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</DataTable>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{togglePanel && <MetricPanel closePanel={onCloseClick} instance={selectedInstance} metrics={selectedMetrics} plan={selectedPlan} gcId={catalog.services[0].id} isMeteringKeySet={isMeteringKeySet} ></MetricPanel>}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nInstances.displayName = 'Instances';\r\n\r\nexport default Instances;\r\n","import { Button, CodeSnippet, Link, SkeletonText } from \"carbon-components-react\";\nimport { CheckmarkFilled16, Launch16, ArrowsHorizontal16 } from '@carbon/icons-react';\nimport './Default.scss';\nimport Objects from \"../Objects/Objects\";\nimport { useEffect, useState } from \"react\";\nimport { AppConst } from \"../../constants/app.constants\";\nimport Instances from \"../Instances/Instances\";\nimport { apiRequest } from \"../../util/app.utils\";\nimport _ from \"lodash\";\nimport { encode } from \"base-64\";\n\nfunction Default() {\n\tconst [selectTable, setSelectTable] = useState(true);\n\tconst [catalog, setCatalog] = useState({});\n\tconst [instructionsUrl, setInstructionUrl] = useState(\"#\");\n\tconst [documentationUrl, setDocumentationUrl] = useState(\"#\");\n\tconst [brokerMetadata, setBrokerMetadata] = useState({});\n\tconst [isMeteringKeySet, setIsMeteringKeySet] = useState(false);\n\n\tuseEffect(() => {\n\t\tif (_.isEmpty(catalog)) {\n\t\t\tgetCatalog();\n\t\t}\n\t})\n\n\tconst getCatalog = async () => {\n\t\tvar headers = new Headers();\n\t\theaders.append(\"Content-Type\", \"application/json\");\n\t\theaders.append(\"Accept\", \"application/json\");\n\t\t\n\t\tvar requestOptions = {\n\t\t\tmethod: 'GET',\n\t\t\theaders: headers,\n\t\t\tredirect: 'follow',\n\t\t\tmode: 'cors'\n\t\t};\n\t\tlet response = await apiRequest(AppConst.apiUrls.getCatalog, requestOptions);\n\t\tif (!_.isEmpty(response)) {\n\t\t\tsetCatalog(response);\n\t\t\tsetInstructionUrl(response.services[0].metadata.instructionsUrl);\n\t\t\tsetDocumentationUrl(response.services[0].metadata.documentationUrl);\n\t\t}\n\t\tlet metadata = await apiRequest(AppConst.apiUrls.getMetadata, requestOptions);\n\t\tif (!_.isEmpty(metadata)) {\n\t\t\tsetBrokerMetadata(metadata);\n\t\t\tsetIsMeteringKeySet(metadata.IS_METERING_APIKEY_SET);\n\t\t}\n\t\treturn response;\n\t}\n\n\tconst toggleTable = () => {\n\t\tsetSelectTable(!selectTable)\n\t}\n\n\treturn (\n\n\t\t<div className=\"container\">\n\t\t\t<div className=\"bx--grid\">\n\t\t\t\t<div className=\"bx--row\">\n\t\t\t\t\t<div className=\"bx--col-lg-12\">\n\t\t\t\t\t\t<span className=\"h3\">\n\t\t\t\t\t\t\t{!_.isEmpty(catalog) ? catalog.services[0].metadata.displayName : <SkeletonText width=\"15%\" className=\"skeletopn-text\" />}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span><CheckmarkFilled16 aria-label=\"status\" className=\"svg-left fill-green\" /> Running</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bx--col-lg-4 link-blank\">\n\t\t\t\t\t\t<Link className=\"\" target=\"_blank\" href=\"#\">Manage on IBM Cloud<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t\t<div className=\"bx--grid broker-info\">\n\t\t\t\t\t<div className=\"bx--row sub-row\">\n\t\t\t\t\t\t<div className=\"bx--col-lg-12\">\n\t\t\t\t\t\t\t<span className=\"h5\">Service broker</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"bx--col-lg-4 link-left\">\n\t\t\t\t\t\t\t<Link className=\"\" target=\"_blank\" href={brokerMetadata.PC_URL ? brokerMetadata.PC_URL : \"#\"}>Partner Center | Sell<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bx--row sub-row\">\n\t\t\t\t\t\t<div className=\"bx--col-lg-12\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{!_.isEmpty(catalog) ? catalog.services[0].description : <SkeletonText width=\"15%\" className=\"skeletopn-text\" />}\n\t\t\t\t\t\t\t\t<Link className=\"inline-link\" target=\"_blank\" href={documentationUrl}>Learn more<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"bx--col-lg-4 link-left\">\n\t\t\t\t\t\t\t<Link className=\"\" target=\"_blank\" href={instructionsUrl}>How to use<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bx--row sub-row\">\n\t\t\t\t\t\t<div className=\"bx--col-lg-16\">\n\t\t\t\t\t\t\t<div className=\"bx--label\">Build number</div>\n\t\t\t\t\t\t\t<CodeSnippet>{brokerMetadata.BUILD_NUMBER}</CodeSnippet>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bx--row sub-row\">\n\t\t\t\t\t\t<div className=\"bx--col-lg-16\">\n\t\t\t\t\t\t\t<div className=\"bx--label\">Broker URL</div>\n\t\t\t\t\t\t\t<CodeSnippet>{brokerMetadata.BROKER_URL ? brokerMetadata.BROKER_URL : \"#\"}</CodeSnippet>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t{selectTable ? <Objects catalog={catalog}></Objects> : <Instances catalog={catalog} isMeteringKeySet={isMeteringKeySet}></Instances>}\n\n\t\t\t\t<Button className=\"tableToggle\" onClick={toggleTable} renderIcon={ArrowsHorizontal16} iconDescription={\"toggle table\"} kind=\"tertiary\">\n\t\t\t\t\tView {AppConst.tables[selectTable ? 1 : 0]}\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div >\n\t);\n}\n\nDefault.displayName = 'Default';\n\nexport default Default;\n","\nimport './App.scss';\nimport Default from './components/Default/Default';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  HashRouter\n} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <HashRouter>\n          <Switch>\n            <Route exact path=\"/\" component={Default} />\n            <Redirect from=\"*\" to=\"/\" />\n          </Switch>\n        </HashRouter>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}