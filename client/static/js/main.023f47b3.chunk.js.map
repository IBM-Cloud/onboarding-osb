{"version":3,"sources":["util/app.utils.js","constants/app.constants.js","components/Objects/Objects.js","components/DisplayModal/DisplayModal.js","components/MetricPanel/MetricPanel.js","components/Instances/Instances.js","components/Default/Default.js","App.js","reportWebVitals.js","index.js"],"names":["getInstanceRows","instances","rowData","map","instance","instanceId","name","planId","status","region","updateDate","push","id","Date","toLocaleDateString","day","month","year","hour","minute","second","apiRequest","url","requestOptions","a","response","fetch","then","json","console","log","AppConst","buildNumber","env","BUILD_NUMBER","brokerCreds","brokerUsername","BROKER_USERNAME","brokerPassword","BROKER_PASSWORD","tableTitles","Objects","Instances","tables","apiUrls","getCatalog","getInstances","getMetadata","sendMetering","gcId","tableHeaders","header","key","Metric","TestMetric","props","catalog","useState","setRowData","headerData","setHeaderData","useEffect","_","isEmpty","services","service","objectId","metadata","kind","updated","plans","plan","getRowDataFromCatalog","className","DataTable","isSortable","rows","headers","getHeaderProps","getRowProps","getTableProps","onInputChange","TableContainer","title","TableToolbar","TableToolbarSearch","placeholder","onChange","TableToolbarContent","TableToolbarMenu","disabled","children","renderIcon","Download16","iconDescription","onClick","e","Renew16","Table","TableHead","TableRow","index","TableHeader","TableBody","row","cells","cell","TableCell","value","displayName","DisplayModal","onCloseModal","openModal","document","getElementsByClassName","click","ModalWrapper","buttonTriggerText","buttonTriggerClassName","modalHeading","passiveModal","preventCloseOnClickOutside","CodeSnippet","type","JSON","stringify","Button","MetricPanel","closePanel","metrics","isMeteringKeySet","metricQuantity","setMetricQuantity","updateFlag","setUpdateFlag","meteringResponse","setMeteringResponse","showModal","setShowModal","isLoading","setIsLoading","costs","met","metric","parseFloat","onNumberChange","quantity","imaginaryTarget","getMesuredUsage","measuredUsage","Object","keys","resourceId","requestBody","Headers","append","method","redirect","mode","body","HeaderPanel","expanded","Close16","NumberInput","min","style","backgroundColor","paddingLeft","textAlign","metricId","find","m","price","prices","InlineLoading","calculateTotal","cost","quantity_tier","getCostForQuantity","getTotalCost","Add16","Tag","togglePanel","setTogglePanel","allMetrics","setAllMetrics","selectedInstance","setSelectedInstance","selectedPlan","setSelectedPlan","selectedMetrics","setSelectedMetrics","getInstanceData","instanceData","instanceRows","getMetric","onTestClick","target","r","getMetricsForPlan","p","metricsData","amounts","amount","amt","country","metric_id","charge_unit_name","tier_model","selectedMetric","TableExpandHeader","TableExpandRow","isExpanded","TableExpandedRow","colSpan","length","Default","selectTable","setSelectTable","setCatalog","instructionsUrl","setInstructionUrl","documentationUrl","setDocumentationUrl","brokerMetadata","setBrokerMetadata","setIsMeteringKeySet","IS_METERING_APIKEY_SET","SkeletonText","width","Link","href","description","BROKER_URL","ArrowsHorizontal16","App","exact","path","component","from","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.023f47b3.chunk.js","sourcesContent":["import mockInstances from '../constants/mock_instance.json';\r\n\r\nexport const getRowDataFromCatalog = (services) => {\r\n\tlet rowData = [];\r\n\tservices.map((service => {\r\n\t\tconst { id, id: objectId, name, metadata } = service;\r\n\t\trowData.push({\r\n\t\t\tid,\r\n\t\t\tobjectId,\r\n\t\t\tname,\r\n\t\t\tkind: \"Service\",\r\n\t\t\tupdated: new Date(metadata.updated).toLocaleDateString(\"en-US\", { day: \"numeric\", month: \"short\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\" }, \"-\")\r\n\t\t});\r\n\t\tservice.plans.map((plan) => {\r\n\t\t\tconst { id, id: objectId, name, metadata } = plan;\r\n\t\t\trowData.push({\r\n\t\t\t\tid,\r\n\t\t\t\tobjectId,\r\n\t\t\t\tname,\r\n\t\t\t\tkind: \"Pricing Plan\",\r\n\t\t\t\tupdated: new Date(metadata.updated).toLocaleDateString(\"en-US\", { day: \"numeric\", month: \"short\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\" }, \"-\")\r\n\t\t\t});\r\n\t\t\treturn true\r\n\t\t});\r\n\t\treturn true;\r\n\t}))\r\n\treturn rowData;\r\n};\r\n\r\nexport const getInstanceRows = (instances) => {\r\n\tlet rowData = [];\r\n\tinstances.map((instance) => {\r\n\t\tconst { instanceId, name, planId, status, region, updateDate } = instance;\r\n\t\trowData.push({\r\n\t\t\tid: instanceId,\r\n\t\t\tinstanceId,\r\n\t\t\tname,\r\n\t\t\tplanId,\r\n\t\t\tstatus,\r\n\t\t\tregion,\r\n\t\t\tupdateDate: new Date(updateDate).toLocaleDateString(\"en-US\", { day: \"numeric\", month: \"short\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\" }, \"-\")\r\n\t\t})\r\n\t\treturn true;\r\n\t})\r\n\treturn rowData;\r\n}\r\n\r\nexport const apiRequest = async (url, requestOptions) => {\r\n\tlet response =[]\r\n\ttry {\r\n\t\tresponse = await fetch(url, requestOptions)\r\n\t\t\t.then(response => response)\r\n\t\t\t.then(response => response.json())\r\n\t}\r\n\tcatch(error) {\r\n\t\tconsole.log(\"No data found.\")\r\n\t}\r\n\treturn response;\r\n};\r\n\r\nexport const getInstances = async () => {\r\n\treturn mockInstances;\r\n}\r\n","import env from \"react-dotenv\";\r\nexport const AppConst = {\r\n\tbuildNumber: env.BUILD_NUMBER || \"test_version_0.1\",\r\n\r\n\tbrokerCreds: {\r\n\t\tbrokerUsername: env.BROKER_USERNAME || \"admin\",\r\n\t\tbrokerPassword: env.BROKER_PASSWORD || \"admin\"\r\n\t},\r\n\r\n\ttableTitles: {\r\n\t\tObjects: \"Objects and metadata\",\r\n\t\tInstances: \"Instances\"\r\n\t},\r\n\r\n\ttables: [\"Objects\", \"Instances\"],\r\n\r\n\tapiUrls: {\r\n\t\tgetCatalog: \"/v2/catalog\",\r\n\t\tgetInstances: \"/support/instances\",\r\n\t\tgetMetadata: \"/support/metadata\",\r\n\t\tsendMetering: (gcId) => \"/metering/\"+gcId+\"/usage\"\r\n\t},\r\n\r\n\ttableHeaders: {\r\n\t\tObjects: [\r\n\t\t\t{\r\n\t\t\t\theader: 'Name',\r\n\t\t\t\tkey: 'name',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Kind',\r\n\t\t\t\tkey: 'kind',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'ID',\r\n\t\t\t\tkey: 'objectId',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Updated',\r\n\t\t\t\tkey: 'updated',\r\n\t\t\t}\r\n\t\t],\r\n\t\tInstances: [\r\n\t\t\t{\r\n\t\t\t\theader: 'Name',\r\n\t\t\t\tkey: 'name',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'ID',\r\n\t\t\t\tkey: 'instanceId',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Status',\r\n\t\t\t\tkey: 'status',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Updated',\r\n\t\t\t\tkey: 'updateDate',\r\n\t\t\t}\r\n\t\t],\r\n\t\tMetric: [\r\n\t\t\t{\r\n\t\t\t\theader: 'Metric',\r\n\t\t\t\tkey: 'metric',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Type',\r\n\t\t\t\tkey: 'type',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'ID',\r\n\t\t\t\tkey: 'metricId',\r\n\t\t\t}\r\n\t\t],\r\n\t\tTestMetric: [\r\n\t\t\t{\r\n\t\t\t\theader: 'Metric Quantity',\r\n\t\t\t\tkey: 'metric',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Cost per unit',\r\n\t\t\t\tkey: 'cost',\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}\r\n","import {\r\n\tDataTable, Table, TableBody, TableCell, TableContainer, TableHead, TableHeader, TableRow, TableToolbar, TableToolbarSearch, TableToolbarContent, TableToolbarMenu\r\n} from \"carbon-components-react\";\r\nimport { Download16, Renew16 } from '@carbon/icons-react';\r\nimport './Objects.scss';\r\nimport { useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { getRowDataFromCatalog } from \"../../util/app.utils\";\r\nimport { AppConst } from \"../../constants/app.constants\";\r\n\r\nfunction Objects(props) {\r\n\tconst { catalog } = props;\r\n\tconst [rowData, setRowData] = useState([]);\r\n\tconst [headerData, setHeaderData] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!_.isEmpty(catalog)) {\r\n\t\t\tsetHeaderData(AppConst.tableHeaders.Objects);\r\n\t\t\tsetRowData(getRowDataFromCatalog(catalog.services));\r\n\t\t}\r\n\t}, [catalog])\r\n\r\n\treturn (\r\n\t\t<div className=\"bx--grid object-info\">\r\n\t\t\t<div className=\"bx--row\">\r\n\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t<DataTable isSortable={true} rows={rowData} headers={headerData}>\r\n\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getRowProps, getTableProps, onInputChange }) => (\r\n\t\t\t\t\t\t\t<TableContainer key=\"tableContainer\" title={AppConst.tableTitles[\"Objects\"]}>\r\n\t\t\t\t\t\t\t\t<TableToolbar>\r\n\t\t\t\t\t\t\t\t\t<TableToolbarSearch placeholder=\"Search...\" onChange={onInputChange} />\r\n\t\t\t\t\t\t\t\t\t<TableToolbarContent>\r\n\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"download\" renderIcon={Download16} iconDescription={\"download\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"refresh\" renderIcon={Renew16} iconDescription={\"reload\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t</TableToolbarContent>\r\n\t\t\t\t\t\t\t\t</TableToolbar>\r\n\t\t\t\t\t\t\t\t<Table {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t{headers.map((header, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader key={index} {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t{rows.map((row, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={row.id} {...getRowProps({ row })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={cell.id}>{cell.value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</DataTable>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nObjects.displayName = 'Objects';\r\n\r\nexport default Objects;\r\n","import {\r\n\tButton, CodeSnippet, ModalWrapper\r\n} from \"carbon-components-react\";\r\n\r\nimport './DisplayModal.scss';\r\nimport { useEffect } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nfunction DisplayModal(props) {\r\n\tconst { response, onCloseModal } = props;\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!_.isEmpty(response)) {\r\n\t\t\topenModal()\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst openModal = () => {\r\n\t\tdocument.getElementsByClassName(\"modal-trigger\")[0].click()\r\n\t}\r\n\r\n\tconst closeModal = () => {\r\n\t\tdocument.getElementsByClassName(\"bx--modal-close\")[0].click()\r\n\t\tonCloseModal();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ModalWrapper\r\n\t\t\t\tbuttonTriggerText=\"Modal\"\r\n\t\t\t\tbuttonTriggerClassName=\"modal-trigger\"\r\n\t\t\t\tmodalHeading=\"Metering Response\"\r\n\t\t\t\tpassiveModal={true}\r\n\t\t\t\tpreventCloseOnClickOutside={true}\r\n\t\t\t>\r\n\t\t\t\t<div className=\"res-modal\">\r\n\t\t\t\t\t{\"Metering API returned status: \" + response[0].status}\r\n\t\t\t\t\t<h6>Response</h6>\r\n\t\t\t\t\t<CodeSnippet type=\"multi\">{JSON.stringify(response, null, 4)}</CodeSnippet>\r\n\t\t\t\t\t<Button kind=\"secondary\" className=\"login-btn\" onClick={closeModal}>Close</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</ModalWrapper>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nDisplayModal.displayName = 'DisplayModal';\r\n\r\nexport default DisplayModal;\r\n","import {\r\n\tHeaderPanel, Button, CodeSnippet, NumberInput, DataTable, TableContainer, Table, TableHead, TableRow, TableHeader, TableBody, TableCell, ModalWrapper, Tag, Loading, InlineLoading\r\n} from \"carbon-components-react\";\r\nimport { Close16, Add16 } from '@carbon/icons-react';\r\nimport './MetricPanel.scss';\r\nimport { useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { AppConst } from \"../../constants/app.constants\";\r\nimport { apiRequest } from \"../../util/app.utils\";\r\nimport { encode } from \"base-64\";\r\nimport DisplayModal from \"../DisplayModal/DisplayModal\";\r\n\r\nfunction MetricPanel(props) {\r\n\tconst { closePanel, instance, metrics, plan, gcId, isMeteringKeySet } = props;\r\n\r\n\tconst [metricQuantity, setMetricQuantity] = useState({});\r\n\tconst [updateFlag, setUpdateFlag] = useState(false);\r\n\tconst [meteringResponse, setMeteringResponse] = useState(false);\r\n\tconst [showModal, setShowModal] = useState(false);\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (_.isEmpty(metricQuantity)) {\r\n\t\t\tlet costs = {};\r\n\t\t\tmetrics.map((met => {\r\n\t\t\t\tcosts[met.metric] = parseFloat(0.00)\r\n\t\t\t\treturn true\r\n\t\t\t}));\r\n\t\t\tsetMetricQuantity(costs);\r\n\t\t\tsetUpdateFlag(!updateFlag);\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst onNumberChange = (e) => {\r\n\t\tlet quantity = metricQuantity;\r\n\t\tlet metricId = e.imaginaryTarget.id;\r\n\t\tquantity[metricId] = e.imaginaryTarget.value;\r\n\t\tsetMetricQuantity(quantity);\r\n\t\tsetUpdateFlag(!updateFlag);\r\n\t}\r\n\r\n\tconst getCostForQuantity = (metricId, quantity) => {\r\n\t\tlet quantityTier = metrics.find(m => m.metric === metricId).price.prices[0].quantity_tier;\r\n\t\tlet price = metrics.find(m => m.metric === metricId).price.prices[0].price;\r\n\t\tlet cost = quantity * price;\r\n\t\treturn cost;\r\n\t}\r\n\r\n\tconst closeModal = () => {\r\n\t\tsetShowModal(false);\r\n\t}\r\n\r\n\tconst getMesuredUsage = () => {\r\n\t\tlet measuredUsage = [];\r\n\t\tObject.keys(metricQuantity).map((metric) => {\r\n\t\t\tmeasuredUsage.push({\r\n\t\t\t\t\"measure\": metric,\r\n\t\t\t\t\"quantity\": metricQuantity[metric]\r\n\t\t\t})\r\n\t\t\treturn true;\r\n\t\t})\r\n\t\treturn measuredUsage;\r\n\t}\r\n\r\n\tconst sendMetering = async () => {\r\n\t\tsetIsLoading(true)\r\n\t\tlet resourceId = instance.id;\r\n\t\tlet region = instance.region;\r\n\t\tlet planId = plan.id;\r\n\t\tlet measuredUsage = getMesuredUsage();\r\n\t\tconst requestBody = {\r\n\t\t\t\"region\": region,\r\n\t\t\t\"resource_instance_id\": resourceId,\r\n\t\t\t\"plan_id\": planId,\r\n\t\t\t\"measured_usage\": measuredUsage\r\n\t\t}\r\n\r\n\t\tvar headers = new Headers();\r\n\t\theaders.append(\"Content-Type\", \"application/json\");\r\n\t\theaders.append(\"Accept\", \"application/json\");\r\n\t\tvar requestOptions = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: headers,\r\n\t\t\tredirect: 'follow',\r\n\t\t\tmode: 'cors',\r\n\t\t\tbody: JSON.stringify(requestBody)\r\n\t\t};\r\n\t\tlet response = await apiRequest(AppConst.apiUrls.sendMetering(gcId), requestOptions);\r\n\t\tsetMeteringResponse(response);\r\n\t\tsetIsLoading(false)\r\n\t\tsetShowModal(true);\r\n\t}\r\n\r\n\tconst getTotalCost = () => {\r\n\t\tlet calculateTotal = 0;\r\n\t\tObject.keys(metricQuantity).map(metricId => {\r\n\t\t\tlet cost = getCostForQuantity(metricId, metricQuantity[metricId]);\r\n\t\t\tcalculateTotal += parseFloat(cost);\r\n\t\t})\r\n\t\treturn calculateTotal;\r\n\t}\r\n\r\n\tconst getCostPerUnit = (metricId) => metrics.find(m => m.metric === metricId).price.prices[0].price;\r\n\r\n\treturn (\r\n\t\t<HeaderPanel aria-label=\"metric side panel\" aria-labelledby=\"side panel\" expanded>\r\n\t\t\t<div className=\"bx--grid\">\r\n\t\t\t\t<div className=\"bx--row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-14\">\r\n\t\t\t\t\t\t<h3>Estimation and pricing</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"bx--col-lg-2\">\r\n\t\t\t\t\t\t<Button kind=\"ghost\" onClick={closePanel} className=\"panel-close-btn\" renderIcon={Close16} iconDescription={\"close panel\"} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<div className=\"bx--label\">Pricing plan name</div>\r\n\t\t\t\t\t\t<CodeSnippet className=\"panel-ele-70\">{plan.name}</CodeSnippet>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<div className=\"bx--label\">Pricing plan programmatic name</div>\r\n\t\t\t\t\t\t<CodeSnippet className=\"panel-ele-70\">{plan.name}</CodeSnippet>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<div className=\"bx--label\">Location</div>\r\n\t\t\t\t\t\t<CodeSnippet className=\"panel-ele-70\">{instance.region}</CodeSnippet>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<h5>Estimation</h5>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{\r\n\t\t\t\t\tmetrics.map((metric, index) => (\r\n\t\t\t\t\t\t<div key={index} className=\"bx--row sub-row\">\r\n\t\t\t\t\t\t\t<div className=\"bx--col-lg-8\">\r\n\t\t\t\t\t\t\t\t<div className=\"bx--label\">{metric.metric}</div>\r\n\t\t\t\t\t\t\t\t<NumberInput onChange={onNumberChange} id={metric.metric} min={0}></NumberInput>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<h5>Testing</h5>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row testing-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\tOnce you've entered values for any metrics you'd\r\n\t\t\t\t\t\tike to test, you can fire corresponding usage events\r\n\t\t\t\t\t\tusing our wonderful button.\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"bx--col-lg-16 sub-row\">\r\n\t\t\t\t\t\t<DataTable rows={metrics} headers={AppConst.tableHeaders.TestMetric}>\r\n\t\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getTableProps }) => (\r\n\t\t\t\t\t\t\t\t<TableContainer title=\"\">\r\n\t\t\t\t\t\t\t\t\t<Table className=\"metric-table\" {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{headers.map((header, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader key={index} {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t\t<TableBody className=\"metric-table-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t{rows.map((row, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: \"#f4f4f4\", paddingLeft: \"1rem\" }} key={row.cells[0].id}><strong>{metricQuantity[row.cells[0].value]}</strong> {row.cells[0].value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: \"#f4f4f4\", paddingLeft: \"1rem\", textAlign: \"right\" }} key={row.cells[1].id}>{getCostPerUnit(row.cells[0].value)} USD</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</DataTable>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row testing-row testing-row-bottom\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16 sub-row\">\r\n\t\t\t\t\t\t{isLoading\r\n\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t<InlineLoading className=\"\"/>\r\n\t\t\t\t\t\t\t: <>\r\n\t\t\t\t\t\t\t\t<Button disabled={isMeteringKeySet ? getTotalCost() <= 0 : true} renderIcon={Add16} iconDescription={\"send test metric\"} onClick={sendMetering}>Send metering data</Button>\r\n\t\t\t\t\t\t\t\t<div>{!isMeteringKeySet && <Tag type=\"red\">Can't send metering data. METERING_API_KEY is not set in broker.</Tag>}</div>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{showModal && <DisplayModal response={meteringResponse} onCloseModal={closeModal}></DisplayModal>}\r\n\t\t</HeaderPanel>\r\n\t);\r\n}\r\n\r\nMetricPanel.displayName = 'MetricPanel';\r\n\r\nexport default MetricPanel;\r\n","import {\r\n\tDataTable, Table, TableBody, TableCell, TableContainer, TableHead, TableHeader, TableRow, TableExpandRow, TableExpandedRow, TableExpandHeader, TableToolbar, TableToolbarSearch, TableToolbarContent, TableToolbarMenu, Button, ModalWrapper\r\n} from \"carbon-components-react\";\r\nimport { Download16, Renew16 } from '@carbon/icons-react';\r\nimport './Instances.scss';\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { AppConst } from \"../../constants/app.constants\";\r\nimport MetricPanel from \"../MetricPanel/MetricPanel\";\r\nimport { apiRequest, getInstanceRows } from \"../../util/app.utils\";\r\nimport _, { isEmpty } from \"lodash\";\r\nimport { encode } from \"base-64\";\r\n\r\nfunction Instances(props) {\r\n\tconst { catalog, isMeteringKeySet } = props;\r\n\tconst [rowData, setRowData] = useState([]);\r\n\tconst [headerData, setHeaderData] = useState([]);\r\n\tconst [togglePanel, setTogglePanel] = useState(false);\r\n\tconst [allMetrics, setAllMetrics] = useState([]);\r\n\tconst [selectedInstance, setSelectedInstance] = useState(\"\");\r\n\tconst [selectedPlan, setSelectedPlan] = useState(\"\");\r\n\tconst [selectedMetrics, setSelectedMetrics] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetHeaderData(AppConst.tableHeaders.Instances);\r\n\t\tif (!_.isEmpty(catalog) && _.isEmpty(rowData)) {\r\n\t\t\tgetInstanceData();\r\n\t\t}\r\n\t}, [catalog])\r\n\r\n\tconst getInstanceData = async () => {\r\n\t\tvar headers = new Headers();\r\n\t\theaders.append(\"Content-Type\", \"application/json\");\r\n\t\theaders.append(\"Accept\", \"application/json\");\r\n\t\tvar requestOptions = {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: headers,\r\n\t\t\tredirect: 'follow',\r\n\t\t\tmode: 'cors'\r\n\t\t};\r\n\t\tlet instanceData = await apiRequest(AppConst.apiUrls.getInstances, requestOptions);\r\n\t\tlet instanceRows = getInstanceRows(instanceData);\r\n\t\tsetRowData(instanceRows);\r\n\t\tgetMetric();\r\n\t}\r\n\r\n\tconst onTestClick = (e) => {\r\n\t\tsetSelectedInstance(rowData[e.target.id]);\r\n\t\tlet planId = rowData.find(r => r.instanceId === e.target.name).planId;\r\n\t\tsetSelectedMetrics(getMetricsForPlan(planId));\r\n\t\tsetSelectedPlan(catalog.services[0].plans.find(p => p.id === planId));\r\n\t\tsetTogglePanel(!togglePanel);\r\n\t}\r\n\r\n\tconst onCloseClick = () => {\r\n\t\tsetTogglePanel(!togglePanel);\r\n\t}\r\n\r\n\tconst getMetric = async () => {\r\n\t\tlet metricsData = [];\r\n\t\tcatalog.services[0].plans.map((plan) => {\r\n\t\t\tif (plan.metadata.costs.metrics) {\r\n\t\t\t\tmetricsData.push({\r\n\t\t\t\t\tplanId: plan.id,\r\n\t\t\t\t\tmetrics: plan.metadata.costs.metrics.map((metric) => {\r\n\t\t\t\t\t\tif (metric && metric.amounts) {\r\n\t\t\t\t\t\t\tlet amount = metric.amounts.find((amt) => amt.country === \"USA\");\r\n\t\t\t\t\t\t\treturn ({\r\n\t\t\t\t\t\t\t\tid: metric.metric_id,\r\n\t\t\t\t\t\t\t\tmetric: metric.charge_unit_name,\r\n\t\t\t\t\t\t\t\tmetricId: metric.metric_id,\r\n\t\t\t\t\t\t\t\ttype: metric.tier_model,\r\n\t\t\t\t\t\t\t\tprice: amount\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t})\r\n\t\tsetAllMetrics(metricsData);\r\n\t}\r\n\r\n\tconst getMetricsForPlan = (planId) => {\r\n\t\tlet selectedMetric = allMetrics.find((met) => met.planId === planId)\r\n\t\tif (selectedMetric && selectedMetric.metrics) {\r\n\t\t\treturn selectedMetric.metrics;\r\n\t\t}\r\n\t\telse return [];\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\r\n\t\t\t<div className=\"bx--grid instances-info\">\r\n\t\t\t\t<div className=\"bx--row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<DataTable rows={rowData} headers={headerData}>\r\n\t\t\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getRowProps, getTableProps, onInputChange }) => (\r\n\t\t\t\t\t\t\t\t\t<TableContainer key=\"tableContainer\" title={AppConst.tableTitles[\"Instances\"]}>\r\n\t\t\t\t\t\t\t\t\t\t<TableToolbar>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableToolbarSearch placeholder=\"Search...\" onChange={onInputChange} />\r\n\t\t\t\t\t\t\t\t\t\t\t<TableToolbarContent>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"download\" renderIcon={Download16} iconDescription={\"Download\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"refresh\" renderIcon={Renew16} iconDescription={\"Reload\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t\t\t</TableToolbarContent>\r\n\t\t\t\t\t\t\t\t\t\t</TableToolbar>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tisEmpty(rowData)\r\n\t\t\t\t\t\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"empty-message\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>No Instances Found.</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Provision instances to see this list.</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Table {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableExpandHeader />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{headers.map((header, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader key={index} {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{rows.map((row, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableExpandRow key={row.id} {...getRowProps({ row })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={cell.id}>{cell.value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableExpandRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.isExpanded && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableExpandedRow colSpan={headers.length + 1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{!isEmpty(getMetricsForPlan(rowData[index].planId))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"metric-desc\">Here are the metrics for this pricing plan.You can even fire events from them to see if things\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tare hooked up right.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"align-right\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button id={index} name={rowData[index].instanceId} onClick={onTestClick} className=\"test-metric-btn\">Test metric reporting</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<DataTable rows={getMetricsForPlan(rowData[index].planId)} headers={AppConst.tableHeaders.Metric}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getTableProps }) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableContainer title=\"\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Table className=\"metric-table\" {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{headers.map((header) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableBody className=\"metric-table-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{rows.map((row) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ paddingLeft: \"1rem\" }} key={cell.id}>{cell.value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</DataTable>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"empty-message\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>No Metrics Found.</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Check plan details.</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableExpandedRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</DataTable>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{togglePanel && <MetricPanel closePanel={onCloseClick} instance={selectedInstance} metrics={selectedMetrics} plan={selectedPlan} gcId={catalog.services[0].id} isMeteringKeySet={isMeteringKeySet} ></MetricPanel>}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nInstances.displayName = 'Instances';\r\n\r\nexport default Instances;\r\n","import { Button, CodeSnippet, Link, SkeletonText } from \"carbon-components-react\";\nimport { CheckmarkFilled16, Launch16, ArrowsHorizontal16 } from '@carbon/icons-react';\nimport './Default.scss';\nimport Objects from \"../Objects/Objects\";\nimport { useEffect, useState } from \"react\";\nimport { AppConst } from \"../../constants/app.constants\";\nimport Instances from \"../Instances/Instances\";\nimport { apiRequest } from \"../../util/app.utils\";\nimport _ from \"lodash\";\nimport { encode } from \"base-64\";\n\nfunction Default() {\n\tconst [selectTable, setSelectTable] = useState(true);\n\tconst [catalog, setCatalog] = useState({});\n\tconst [instructionsUrl, setInstructionUrl] = useState(\"#\");\n\tconst [documentationUrl, setDocumentationUrl] = useState(\"#\");\n\tconst [brokerMetadata, setBrokerMetadata]=useState({});\n\tconst [isMeteringKeySet, setIsMeteringKeySet]=useState(false);\n\n\tuseEffect(() => {\n\t\tif (_.isEmpty(catalog)) {\n\t\t\tgetCatalog();\n\t\t}\n\t})\n\n\tconst getCatalog = async () => {\n\t\tvar headers = new Headers();\n\t\theaders.append(\"Content-Type\", \"application/json\");\n\t\theaders.append(\"Accept\", \"application/json\");\n\t\tvar requestOptions = {\n\t\t\tmethod: 'GET',\n\t\t\theaders: headers,\n\t\t\tredirect: 'follow',\n\t\t\tmode: 'cors'\n\t\t};\n\t\tlet response = await apiRequest(AppConst.apiUrls.getCatalog, requestOptions);\n\t\tif (!_.isEmpty(response)) {\n\t\t\tsetCatalog(response);\n\t\t\tsetInstructionUrl(response.services[0].metadata.instructionsUrl);\n\t\t\tsetDocumentationUrl(response.services[0].metadata.documentationUrl);\n\t\t}\n\t\tlet metadata=await apiRequest(AppConst.apiUrls.getMetadata, requestOptions);\n\t\tif (!_.isEmpty(metadata)) {\n\t\t\tsetBrokerMetadata(metadata);\n\t\t\tsetIsMeteringKeySet(metadata.IS_METERING_APIKEY_SET);\n\t\t}\n\t\treturn response;\n\t}\n\n\tconst toggleTable = () => {\n\t\tsetSelectTable(!selectTable)\n\t}\n\n\treturn (\n\n\t\t<div className=\"container\">\n\t\t\t<div className=\"bx--grid\">\n\t\t\t\t<div className=\"bx--row\">\n\t\t\t\t\t<div className=\"bx--col-lg-12\">\n\t\t\t\t\t\t<span className=\"h3\">\n\t\t\t\t\t\t\t{!_.isEmpty(catalog) ? catalog.services[0].metadata.displayName : <SkeletonText width=\"15%\" className=\"skeletopn-text\" />}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span><CheckmarkFilled16 aria-label=\"status\" className=\"svg-left fill-green\" /> Running</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bx--col-lg-4 link-blank\">\n\t\t\t\t\t\t<Link className=\"\" target=\"_blank\" href=\"#\">Manage on IBM Cloud<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t\t<div className=\"bx--grid broker-info\">\n\t\t\t\t\t<div className=\"bx--row sub-row\">\n\t\t\t\t\t\t<div className=\"bx--col-lg-12\">\n\t\t\t\t\t\t\t<span className=\"h5\">Service broker</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"bx--col-lg-4 link-left\">\n\t\t\t\t\t\t\t<Link className=\"\" target=\"_blank\" href=\"#\">Partner Center | Sell<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bx--row sub-row\">\n\t\t\t\t\t\t<div className=\"bx--col-lg-12\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{!_.isEmpty(catalog) ? catalog.services[0].description : <SkeletonText width=\"15%\" className=\"skeletopn-text\" />}\n\t\t\t\t\t\t\t\t<Link className=\"inline-link\" target=\"_blank\" href={documentationUrl}>Learn more<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"bx--col-lg-4 link-left\">\n\t\t\t\t\t\t\t<Link className=\"\" target=\"_blank\" href={instructionsUrl}>How to use<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bx--row sub-row\">\n\t\t\t\t\t\t<div className=\"bx--col-lg-16\">\n\t\t\t\t\t\t\t<div className=\"bx--label\">Build number</div>\n\t\t\t\t\t\t\t<CodeSnippet>{brokerMetadata.BUILD_NUMBER}</CodeSnippet>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bx--row sub-row\">\n\t\t\t\t\t\t<div className=\"bx--col-lg-16\">\n\t\t\t\t\t\t\t<div className=\"bx--label\">Broker URL</div>\n\t\t\t\t\t\t\t<CodeSnippet>{brokerMetadata.BROKER_URL?brokerMetadata.BROKER_URL:\"#\"}</CodeSnippet>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t{selectTable ? <Objects catalog={catalog}></Objects> : <Instances catalog={catalog} isMeteringKeySet={isMeteringKeySet}></Instances>}\n\n\t\t\t\t<Button className=\"tableToggle\" onClick={toggleTable} renderIcon={ArrowsHorizontal16} iconDescription={\"toggle table\"} kind=\"tertiary\">\n\t\t\t\t\tView {AppConst.tables[selectTable ? 1 : 0]}\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div >\n\t);\n}\n\nDefault.displayName = 'Default';\n\nexport default Default;\n","\nimport './App.scss';\nimport Default from './components/Default/Default';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  HashRouter\n} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <HashRouter>\n          <Switch>\n            <Route exact path=\"/\" component={Default} />\n            <Redirect from=\"*\" to=\"/\" />\n          </Switch>\n        </HashRouter>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}