{"version":3,"sources":["util/app.utils.js","constants/app.constants.js","components/Objects/Objects.js","components/MetricPanel/MetricPanel.js","components/Instances/Instances.js","components/Default/Default.js","App.js","reportWebVitals.js","index.js"],"names":["getInstanceRows","instances","rowData","map","instance","instanceId","name","planId","status","region","updateDate","push","id","Date","toLocaleDateString","day","month","year","hour","minute","second","apiRequest","url","requestOptions","a","fetch","then","response","json","AppConst","buildNumber","env","BUILD_NUMBER","brokerCreds","brokerUsername","BROKER_USERNAME","brokerPassword","BROKER_PASSWORD","tableTitles","Objects","Instances","tables","apiUrls","getCatalog","getInstances","tableHeaders","header","key","Metric","TestMetric","props","catalog","useState","setRowData","headerData","setHeaderData","useEffect","_","isEmpty","services","service","objectId","metadata","kind","updated","plans","plan","getRowDataFromCatalog","className","DataTable","isSortable","rows","headers","getHeaderProps","getRowProps","getTableProps","onInputChange","TableContainer","title","TableToolbar","TableToolbarSearch","placeholder","onChange","TableToolbarContent","TableToolbarMenu","disabled","children","renderIcon","Download16","iconDescription","onClick","e","console","log","Renew16","Table","TableHead","TableRow","index","TableHeader","TableBody","row","cells","cell","TableCell","value","displayName","MetricPanel","closePanel","metrics","metricQuantity","setMetricQuantity","updateFlag","setUpdateFlag","costs","met","metric","parseFloat","onNumberChange","quantity","imaginaryTarget","HeaderPanel","expanded","Button","Close16","CodeSnippet","NumberInput","min","style","backgroundColor","paddingLeft","textAlign","metricId","find","m","price","prices","calculateTotal","Object","keys","cost","quantity_tier","getCostForQuantity","getTotalCost","Add16","togglePanel","setTogglePanel","allMetrics","setAllMetrics","selectedInstance","setSelectedInstance","selectedPlan","setSelectedPlan","selectedMetrics","setSelectedMetrics","getInstanceData","Headers","append","method","redirect","mode","instanceData","instanceRows","getMetric","onTestClick","target","r","getMetricsForPlan","p","metricsData","amount","amounts","amt","country","metric_id","charge_unit_display_name","type","tier_model","TableExpandHeader","TableExpandRow","isExpanded","TableExpandedRow","colSpan","length","Default","selectTable","setSelectTable","setCatalog","instructionsUrl","setInstructionUrl","documentationUrl","setDocumentationUrl","SkeletonText","width","Link","href","description","ArrowsHorizontal16","App","exact","path","component","from","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc82363b.chunk.js","sourcesContent":["import mockInstances from '../constants/mock_instance.json';\r\n\r\nexport const getRowDataFromCatalog = (services) => {\r\n\tlet rowData = [];\r\n\tservices.map((service => {\r\n\t\tconst { id, id: objectId, name, metadata } = service;\r\n\t\trowData.push({\r\n\t\t\tid,\r\n\t\t\tobjectId,\r\n\t\t\tname,\r\n\t\t\tkind: \"Service\",\r\n\t\t\tupdated: new Date(metadata.updated).toLocaleDateString(\"en-US\", { day: \"numeric\", month: \"short\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\" }, \"-\")\r\n\t\t});\r\n\t\tservice.plans.map((plan) => {\r\n\t\t\tconst { id, id: objectId, name, metadata } = plan;\r\n\t\t\trowData.push({\r\n\t\t\t\tid,\r\n\t\t\t\tobjectId,\r\n\t\t\t\tname,\r\n\t\t\t\tkind: \"Pricing Plan\",\r\n\t\t\t\tupdated: new Date(metadata.updated).toLocaleDateString(\"en-US\", { day: \"numeric\", month: \"short\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\" }, \"-\")\r\n\t\t\t});\r\n\t\t\treturn true\r\n\t\t});\r\n\t\treturn true;\r\n\t}))\r\n\treturn rowData;\r\n};\r\n\r\nexport const getInstanceRows = (instances) => {\r\n\tlet rowData = [];\r\n\tinstances.map((instance) => {\r\n\t\tconst { instanceId, name, planId, status, region, updateDate } = instance;\r\n\t\trowData.push({\r\n\t\t\tid: instanceId,\r\n\t\t\tinstanceId,\r\n\t\t\tname,\r\n\t\t\tplanId,\r\n\t\t\tstatus,\r\n\t\t\tregion,\r\n\t\t\tupdateDate: new Date(updateDate).toLocaleDateString(\"en-US\", { day: \"numeric\", month: \"short\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\" }, \"-\")\r\n\t\t})\r\n\t\treturn true;\r\n\t})\r\n\treturn rowData;\r\n}\r\n\r\nexport const apiRequest = async (url, requestOptions) => {\r\n\tlet response = await fetch(url, requestOptions)\r\n\t\t.then(response => response)\r\n\t\t.then(response => response.json())\r\n\treturn response;\r\n};\r\n\r\nexport const getInstances = async () => {\r\n\treturn mockInstances;\r\n}\r\n","import env from \"react-dotenv\";\r\nexport const AppConst = {\r\n\tbuildNumber: env.BUILD_NUMBER || \"test_version_0.1\",\r\n\t\r\n\tbrokerCreds:{\r\n\t\tbrokerUsername: env.BROKER_USERNAME || \"admin\",\r\n\t\tbrokerPassword: env.BROKER_PASSWORD || \"admin\"\r\n\t},\r\n\r\n\ttableTitles: {\r\n\t\tObjects: \"Objects and metadata\",\r\n\t\tInstances: \"Instances\"\r\n\t},\r\n\r\n\ttables: [\"Objects\", \"Instances\"],\r\n\r\n\tapiUrls: {\r\n\t\tgetCatalog: \"/v2/catalog\",\r\n\t\tgetInstances: \"/support/instances\"\r\n\t},\r\n\r\n\ttableHeaders: {\r\n\t\tObjects: [\r\n\t\t\t{\r\n\t\t\t\theader: 'Name',\r\n\t\t\t\tkey: 'name',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Kind',\r\n\t\t\t\tkey: 'kind',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'ID',\r\n\t\t\t\tkey: 'objectId',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Updated',\r\n\t\t\t\tkey: 'updated',\r\n\t\t\t}\r\n\t\t],\r\n\t\tInstances: [\r\n\t\t\t{\r\n\t\t\t\theader: 'ID',\r\n\t\t\t\tkey: 'instanceId',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Name',\r\n\t\t\t\tkey: 'name',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Status',\r\n\t\t\t\tkey: 'status',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Updated',\r\n\t\t\t\tkey: 'updateDate',\r\n\t\t\t}\r\n\t\t],\r\n\t\tMetric: [\r\n\t\t\t{\r\n\t\t\t\theader: 'Metric',\r\n\t\t\t\tkey: 'metric',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Type',\r\n\t\t\t\tkey: 'type',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'ID',\r\n\t\t\t\tkey: 'metricId',\r\n\t\t\t}\r\n\t\t],\r\n\t\tTestMetric: [\r\n\t\t\t{\r\n\t\t\t\theader: 'Metric Quantity',\r\n\t\t\t\tkey: 'metric',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: 'Cost per unit',\r\n\t\t\t\tkey: 'cost',\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}\r\n","import {\r\n\tDataTable, Table, TableBody, TableCell, TableContainer, TableHead, TableHeader, TableRow, TableToolbar, TableToolbarSearch, TableToolbarContent, TableToolbarMenu\r\n} from \"carbon-components-react\";\r\nimport { Download16, Renew16 } from '@carbon/icons-react';\r\nimport './Objects.scss';\r\nimport { useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { getRowDataFromCatalog } from \"../../util/app.utils\";\r\nimport { AppConst } from \"../../constants/app.constants\";\r\n\r\nfunction Objects(props) {\r\n\tconst { catalog } = props;\r\n\tconst [rowData, setRowData] = useState([]);\r\n\tconst [headerData, setHeaderData] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!_.isEmpty(catalog)) {\r\n\t\t\tsetHeaderData(AppConst.tableHeaders.Objects);\r\n\t\t\tsetRowData(getRowDataFromCatalog(catalog.services));\r\n\t\t}\r\n\t}, [catalog])\r\n\r\n\treturn (\r\n\t\t<div className=\"bx--grid object-info\">\r\n\t\t\t<div className=\"bx--row\">\r\n\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t<DataTable isSortable={true} rows={rowData} headers={headerData}>\r\n\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getRowProps, getTableProps, onInputChange }) => (\r\n\t\t\t\t\t\t\t<TableContainer key=\"tableContainer\" title={AppConst.tableTitles[\"Objects\"]}>\r\n\t\t\t\t\t\t\t\t<TableToolbar>\r\n\t\t\t\t\t\t\t\t\t<TableToolbarSearch placeholder=\"Search...\" onChange={onInputChange} />\r\n\t\t\t\t\t\t\t\t\t<TableToolbarContent>\r\n\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"download\" renderIcon={Download16} iconDescription={\"download\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"refresh\" renderIcon={Renew16} iconDescription={\"reload\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t</TableToolbarContent>\r\n\t\t\t\t\t\t\t\t</TableToolbar>\r\n\t\t\t\t\t\t\t\t<Table {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t{headers.map((header, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader key={index} {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t{rows.map((row, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={row.id} {...getRowProps({ row })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={cell.id}>{cell.value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</DataTable>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nObjects.displayName = 'Objects';\r\n\r\nexport default Objects;\r\n","import {\r\n\tHeaderPanel, Button, CodeSnippet, NumberInput, DataTable, TableContainer, Table, TableHead, TableRow, TableHeader, TableBody, TableCell\r\n} from \"carbon-components-react\";\r\nimport { Close16, Add16 } from '@carbon/icons-react';\r\nimport './MetricPanel.scss';\r\nimport { useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { AppConst } from \"../../constants/app.constants\";\r\n\r\nfunction MetricPanel(props) {\r\n\tconst { closePanel, instance, metrics, plan } = props;\r\n\r\n\tconst [metricQuantity, setMetricQuantity] = useState({});\r\n\tconst [updateFlag, setUpdateFlag] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (_.isEmpty(metricQuantity)) {\r\n\t\t\tlet costs = {};\r\n\t\t\tmetrics.map((met => {\r\n\t\t\t\tcosts[\"\" + met.metric] = parseFloat(0.00)\r\n\t\t\t\treturn true\r\n\t\t\t}));\r\n\t\t\tsetMetricQuantity(costs);\r\n\t\t\tsetUpdateFlag(!updateFlag);\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst onNumberChange = (e) => {\r\n\t\tlet quantity = metricQuantity;\r\n\t\tlet metricId = e.imaginaryTarget.id;\r\n\t\tquantity[metricId] = e.imaginaryTarget.value;\r\n\t\tsetMetricQuantity(quantity);\r\n\t\tsetUpdateFlag(!updateFlag);\r\n\t}\r\n\r\n\tconst getCostForQuantity = (metricId, quantity) => {\r\n\t\tlet quantityTier = metrics.find(m => m.metric === metricId).price.prices[0].quantity_tier;\r\n\t\tlet price = metrics.find(m => m.metric === metricId).price.prices[0].price;\r\n\t\tlet cost = quantity * price;\r\n\t\treturn cost;\r\n\t}\r\n\r\n\tconst getTotalCost = () => {\r\n\t\tlet calculateTotal = 0;\r\n\t\tObject.keys(metricQuantity).map(metricId => {\r\n\t\t\tlet cost = getCostForQuantity(metricId, metricQuantity[metricId]);\r\n\t\t\tcalculateTotal += parseFloat(cost);\r\n\t\t})\r\n\t\treturn calculateTotal;\r\n\t}\r\n\r\n\tconst getCostPerUnit = (metricId) => metrics.find(m => m.metric === metricId).price.prices[0].price;\r\n\r\n\treturn (\r\n\t\t<HeaderPanel aria-label=\"metric side panel\" aria-labelledby=\"side panel\" expanded>\r\n\t\t\t<div className=\"bx--grid\">\r\n\t\t\t\t<div className=\"bx--row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-14\">\r\n\t\t\t\t\t\t<h3>Estimation and pricing</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"bx--col-lg-2\">\r\n\t\t\t\t\t\t<Button kind=\"ghost\" onClick={closePanel} className=\"panel-close-btn\" renderIcon={Close16} iconDescription={\"close panel\"} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<div className=\"bx--label\">Pricing plan name</div>\r\n\t\t\t\t\t\t<CodeSnippet className=\"panel-ele-70\">{plan.name}</CodeSnippet>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<div className=\"bx--label\">Pricing plan programmatic name</div>\r\n\t\t\t\t\t\t<CodeSnippet className=\"panel-ele-70\">{plan.name}</CodeSnippet>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<div className=\"bx--label\">Location</div>\r\n\t\t\t\t\t\t<CodeSnippet className=\"panel-ele-70\">{instance.region}</CodeSnippet>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<h5>Estimation</h5>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{\r\n\t\t\t\t\tmetrics.map((metric, index) => (\r\n\t\t\t\t\t\t<div key={index} className=\"bx--row sub-row\">\r\n\t\t\t\t\t\t\t<div className=\"bx--col-lg-8\">\r\n\t\t\t\t\t\t\t\t<div className=\"bx--label\">{metric.metric}</div>\r\n\t\t\t\t\t\t\t\t<NumberInput onChange={onNumberChange} id={metric.metric} min={0}></NumberInput>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<h5>Testing</h5>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row testing-row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\tOnce you've entered values for any metrics you'd\r\n\t\t\t\t\t\tike to test, you can fire corresponding usage events\r\n\t\t\t\t\t\tusing our wonderful button.\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"bx--col-lg-16 sub-row\">\r\n\t\t\t\t\t\t<DataTable rows={metrics} headers={AppConst.tableHeaders.TestMetric}>\r\n\t\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getTableProps }) => (\r\n\t\t\t\t\t\t\t\t<TableContainer title=\"\">\r\n\t\t\t\t\t\t\t\t\t<Table className=\"metric-table\" {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{headers.map((header, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader key={index} {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t\t<TableBody className=\"metric-table-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t{rows.map((row, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: \"#f4f4f4\", paddingLeft: \"1rem\" }} key={row.cells[0].id}><strong>{metricQuantity[row.cells[0].value]}</strong> {row.cells[0].value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: \"#f4f4f4\", paddingLeft: \"1rem\", textAlign: \"right\" }} key={row.cells[1].id}>{getCostPerUnit(row.cells[0].value)} USD</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</DataTable>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--row sub-row testing-row testing-row-bottom\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16 sub-row\">\r\n\t\t\t\t\t\t<Button disabled={getTotalCost() <= 0} renderIcon={Add16} iconDescription={\"send test metric\"}>Send metering data</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</HeaderPanel>\r\n\t);\r\n}\r\n\r\nMetricPanel.displayName = 'MetricPanel';\r\n\r\nexport default MetricPanel;\r\n","import {\r\n\tDataTable, Table, TableBody, TableCell, TableContainer, TableHead, TableHeader, TableRow, TableExpandRow, TableExpandedRow, TableExpandHeader, TableToolbar, TableToolbarSearch, TableToolbarContent, TableToolbarMenu, Button\r\n} from \"carbon-components-react\";\r\nimport { Download16, Renew16 } from '@carbon/icons-react';\r\nimport './Instances.scss';\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { AppConst } from \"../../constants/app.constants\";\r\nimport MetricPanel from \"../MetricPanel/MetricPanel\";\r\nimport { apiRequest, getInstanceRows } from \"../../util/app.utils\";\r\nimport _, { isEmpty } from \"lodash\";\r\nimport { encode } from \"base-64\";\r\n\r\nfunction Instances(props) {\r\n\tconst { catalog } = props;\r\n\tconst [rowData, setRowData] = useState([]);\r\n\tconst [headerData, setHeaderData] = useState([]);\r\n\tconst [togglePanel, setTogglePanel] = useState(false);\r\n\tconst [allMetrics, setAllMetrics] = useState([]);\r\n\tconst [selectedInstance, setSelectedInstance] = useState(\"\");\r\n\tconst [selectedPlan, setSelectedPlan] = useState(\"\");\r\n\tconst [selectedMetrics, setSelectedMetrics] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetHeaderData(AppConst.tableHeaders.Instances);\r\n\t\tif (!_.isEmpty(catalog) && _.isEmpty(rowData)) {\r\n\t\t\tgetInstanceData();\r\n\t\t}\r\n\t}, [catalog])\r\n\r\n\tconst getInstanceData = async () => {\r\n\t\tvar headers = new Headers();\r\n\t\theaders.append(\"Content-Type\", \"application/json\");\r\n\t\theaders.append(\"Accept\", \"application/json\");\r\n\t\tvar requestOptions = {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: headers,\r\n\t\t\tredirect: 'follow',\r\n\t\t\tmode: 'cors'\r\n\t\t};\r\n\t\tlet instanceData = await apiRequest(AppConst.apiUrls.getInstances, requestOptions);\r\n\t\tlet instanceRows = getInstanceRows(instanceData);\r\n\t\tsetRowData(instanceRows);\r\n\t\tgetMetric();\r\n\t}\r\n\r\n\tconst onTestClick = (e) => {\r\n\t\tsetSelectedInstance(rowData[e.target.id]);\r\n\t\tlet planId = rowData.find(r => r.instanceId === e.target.name).planId;\r\n\t\tsetSelectedMetrics(getMetricsForPlan(planId));\r\n\t\tsetSelectedPlan(catalog.services[0].plans.find(p => p.id === planId));\r\n\t\tsetTogglePanel(!togglePanel);\r\n\t}\r\n\r\n\tconst onCloseClick = () => {\r\n\t\tsetTogglePanel(!togglePanel);\r\n\t}\r\n\r\n\tconst getMetric = async () => {\r\n\t\tlet metricsData = [];\r\n\t\tcatalog.services[0].plans.map((plan) => {\r\n\t\t\tmetricsData.push({\r\n\t\t\t\tplanId: plan.id,\r\n\t\t\t\tmetrics: plan.metadata.costs.metrics.map((metric) => {\r\n\t\t\t\t\tlet amount = metric.amounts.find((amt) => amt.country === \"USA\");\r\n\t\t\t\t\treturn ({\r\n\t\t\t\t\t\tid: metric.metric_id,\r\n\t\t\t\t\t\tmetric: metric.charge_unit_display_name,\r\n\t\t\t\t\t\tmetricId: metric.metric_id,\r\n\t\t\t\t\t\ttype: metric.tier_model,\r\n\t\t\t\t\t\tprice: amount\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\treturn true;\r\n\t\t})\r\n\t\tsetAllMetrics(metricsData);\r\n\t}\r\n\r\n\tconst getMetricsForPlan = (planId) => {\r\n\t\tlet selectedMetric = allMetrics.find((met) => met.planId === planId)\r\n\t\treturn selectedMetric.metrics;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"bx--grid instances-info\">\r\n\t\t\t\t<div className=\"bx--row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<DataTable rows={rowData} headers={headerData}>\r\n\t\t\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getRowProps, getTableProps, onInputChange }) => (\r\n\t\t\t\t\t\t\t\t\t<TableContainer key=\"tableContainer\" title={AppConst.tableTitles[\"Instances\"]}>\r\n\t\t\t\t\t\t\t\t\t\t<TableToolbar>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableToolbarSearch placeholder=\"Search...\" onChange={onInputChange} />\r\n\t\t\t\t\t\t\t\t\t\t\t<TableToolbarContent>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"download\" renderIcon={Download16} iconDescription={\"Download\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableToolbarMenu disabled children={[]} key=\"refresh\" renderIcon={Renew16} iconDescription={\"Reload\"} onClick={(e) => { console.log(e) }} />\r\n\t\t\t\t\t\t\t\t\t\t\t</TableToolbarContent>\r\n\t\t\t\t\t\t\t\t\t\t</TableToolbar>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tisEmpty(rowData)\r\n\t\t\t\t\t\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"empty-message\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>No Instances Found.</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Provision instances to see this list.</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Table {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableExpandHeader />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{headers.map((header, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader key={index} {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{rows.map((row, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableExpandRow key={row.id} {...getRowProps({ row })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={cell.id}>{cell.value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableExpandRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.isExpanded && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableExpandedRow colSpan={headers.length + 1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"metric-desc\">Here are the metrics for this pricing plan.You can even fire events from them to see if things\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tare hooked up right.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"align-right\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button id={index} name={rowData[index].instanceId} onClick={onTestClick} className=\"test-metric-btn\">Test metric reporting</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<DataTable rows={getMetricsForPlan(rowData[index].planId)} headers={AppConst.tableHeaders.Metric}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{({ rows, headers, getHeaderProps, getTableProps }) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableContainer title=\"\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Table className=\"metric-table\" {...getTableProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{headers.map((header) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHeader {...getHeaderProps({ header })}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{header.header}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableBody className=\"metric-table-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{rows.map((row) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={row.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ paddingLeft: \"1rem\" }} key={cell.id}>{cell.value}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</DataTable>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableExpandedRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</DataTable>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{togglePanel && <MetricPanel closePanel={onCloseClick} instance={selectedInstance} metrics={selectedMetrics} plan={selectedPlan} ></MetricPanel>}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nInstances.displayName = 'Instances';\r\n\r\nexport default Instances;\r\n","import { Button, CodeSnippet, Link, SkeletonText } from \"carbon-components-react\";\r\nimport { CheckmarkFilled16, Launch16, ArrowsHorizontal16 } from '@carbon/icons-react';\r\nimport './Default.scss';\r\nimport Objects from \"../Objects/Objects\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { AppConst } from \"../../constants/app.constants\";\r\nimport Instances from \"../Instances/Instances\";\r\nimport { apiRequest } from \"../../util/app.utils\";\r\nimport _ from \"lodash\";\r\nimport { encode } from \"base-64\";\r\n\r\nfunction Default() {\r\n\tconst [selectTable, setSelectTable] = useState(true);\r\n\tconst [catalog, setCatalog] = useState({});\r\n\tconst [instructionsUrl, setInstructionUrl] = useState(\"#\");\r\n\tconst [documentationUrl, setDocumentationUrl] = useState(\"#\");\r\n\r\n\tuseEffect(() => {\r\n\t\tif (_.isEmpty(catalog)) {\r\n\t\t\tgetCatalog();\r\n\t\t}\r\n\t})\r\n\r\n\tconst getCatalog = async () => {\r\n\t\tvar headers = new Headers();\r\n\t\theaders.append(\"Content-Type\", \"application/json\");\r\n\t\theaders.append(\"Accept\", \"application/json\");\r\n\t\tvar requestOptions = {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: headers,\r\n\t\t\tredirect: 'follow',\r\n\t\t\tmode: 'cors'\r\n\t\t};\r\n\t\tlet response = await apiRequest(AppConst.apiUrls.getCatalog, requestOptions);\r\n\t\tif (!_.isEmpty(response)) {\r\n\t\t\tsetCatalog(response);\r\n\t\t\tsetInstructionUrl(response.services[0].metadata.instructionsUrl);\r\n\t\t\tsetDocumentationUrl(response.services[0].metadata.documentationUrl);\r\n\t\t}\r\n\t\treturn response;\r\n\t}\r\n\r\n\tconst toggleTable = () => {\r\n\t\tsetSelectTable(!selectTable)\r\n\t}\r\n\r\n\treturn (\r\n\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"bx--grid\">\r\n\t\t\t\t<div className=\"bx--row\">\r\n\t\t\t\t\t<div className=\"bx--col-lg-12\">\r\n\t\t\t\t\t\t<span className=\"h3\">\r\n\t\t\t\t\t\t\t{!_.isEmpty(catalog) ? catalog.services[0].name : <SkeletonText width=\"15%\" className=\"skeletopn-text\" />}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span><CheckmarkFilled16 aria-label=\"status\" className=\"svg-left fill-green\" /> Running</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"bx--col-lg-4 link-blank\">\r\n\t\t\t\t\t\t<Link className=\"\" target=\"_blank\" href=\"#\">Manage on IBM Cloud<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bx--grid broker-info\">\r\n\t\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t\t<div className=\"bx--col-lg-12\">\r\n\t\t\t\t\t\t\t<span className=\"h5\">Service broker</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"bx--col-lg-4 link-left\">\r\n\t\t\t\t\t\t\t<Link className=\"\" target=\"_blank\" href=\"#\">Partner Center | Sell<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t\t<div className=\"bx--col-lg-12\">\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t{!_.isEmpty(catalog) ? catalog.services[0].description : <SkeletonText width=\"15%\" className=\"skeletopn-text\" />}\r\n\t\t\t\t\t\t\t\t<Link className=\"inline-link\" target=\"_blank\" href={documentationUrl}>Learn more<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"bx--col-lg-4 link-left\">\r\n\t\t\t\t\t\t\t<Link className=\"\" target=\"_blank\" href={instructionsUrl}>How to use<Launch16 aria-label=\"open link\" className=\"svg-right fill-link\" /></Link>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"bx--row sub-row\">\r\n\t\t\t\t\t\t<div className=\"bx--col-lg-16\">\r\n\t\t\t\t\t\t\t<div className=\"bx--label\">Build number</div>\r\n\t\t\t\t\t\t\t<CodeSnippet>{AppConst.buildNumber}</CodeSnippet>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{selectTable ? <Objects catalog={catalog}></Objects> : <Instances catalog={catalog}></Instances>}\r\n\r\n\t\t\t\t<Button className=\"tableToggle\" onClick={toggleTable} renderIcon={ArrowsHorizontal16} iconDescription={\"toggle table\"} kind=\"tertiary\">\r\n\t\t\t\t\tView {AppConst.tables[selectTable ? 1 : 0]}\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</div >\r\n\t);\r\n}\r\n\r\nDefault.displayName = 'Default';\r\n\r\nexport default Default;\r\n","\nimport './App.scss';\nimport Default from './components/Default/Default';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  HashRouter\n} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <HashRouter>\n          <Switch>\n            <Route exact path=\"/\" component={Default} />\n            <Redirect from=\"*\" to=\"/\" />\n          </Switch>\n        </HashRouter>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}